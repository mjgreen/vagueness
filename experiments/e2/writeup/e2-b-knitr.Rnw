\documentclass[a4paper,12pt]{article}
\usepackage[margin=2cm]{geometry}
\usepackage{placeins}

\title{Exp 2 of 4}
\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
options(formatR.arrow=TRUE, 
        width=100)
opts_chunk$set(fig.path='figure/graphics-', 
               cache.path='cache/graphics-', 
               fig.align='center', 
               dev='pdf', 
               fig.width=5, 
               fig.height=5, 
               fig.show='hold', 
               cache=FALSE, 
               par=TRUE,
               size='scriptsize',
               tidy=TRUE,
               comment = NA,
               tidy.opts = list(blank=FALSE, 
                                width.cutoff=100))
knit_hooks$set(crop=hook_pdfcrop)
@

\maketitle
\tableofcontents
\clearpage

<<loadFonts, message=FALSE, echo=FALSE>>=
library(fontcm)
library(extrafont)
#font_import()
#loadfonts()
@

<<loadLibs, message=FALSE, echo=FALSE>>=
library(beepr)                     #
library(car)                       #
library(ggplot2)                   #
library(grid)                      #
library(gridExtra)                 #
library(languageR)                 #
library(lattice)                   #
library(latticeExtra)              # for doubleYScale
library(lme4)                      #
library(lmerTest)                  #
library(LMERConvenienceFunctions)  # for perSubjectTrim
library(MASS)                      #
library(plyr)                      #
library(reshape2)                  #
library(rms)                       # for varclus
library(Rmisc)                     # for summarySEwithin and friends
library(xtable)                    #
@

<<gatherDataFunction, echo=FALSE>>=
gatherData = function(number_of_valid_subjects) {
  data_dir <- '../experimentCode/output/'
  column.headers.df <-  head( read.table(
    paste(data_dir,'subject01.data',sep=''),
    header=TRUE),0)
  gathered.data <- column.headers.df
  for (subject in 1:number_of_valid_subjects) {
    current.filename <- paste(data_dir, 'subject', sprintf("%02d",subject), '.data', sep='')
    current.data <- read.table(file=current.filename, header=TRUE, stringsAsFactors = FALSE)
    gathered.data <- rbind(gathered.data, current.data)
  }
  message('Returning gathered data')
  return(gathered.data)
} # end of gatherData function
@

<<classifyResponseFuntion, echo=FALSE>>=
classifyResponses = function(dat) {
  # what were they expected to respond?
  dat$crossed = as.factor(paste('Con', dat$Condition, ':Quan', dat$Quantity, ':Item', dat$Item, sep=''))
  dat[dat$crossed=='Con1:Quan1:Item1', 'Exp_Num']       <-  6
  dat[dat$crossed=='Con1:Quan1:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con1:Quan1:Item1', 'Extr_Num']      <- 24
  dat[dat$crossed=='Con1:Quan1:Item2', 'Exp_Num'] <- 16
  dat[dat$crossed=='Con1:Quan1:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con1:Quan1:Item2', 'Extr_Num']      <- 34
  dat[dat$crossed=='Con1:Quan1:Item3', 'Exp_Num'] <- 26
  dat[dat$crossed=='Con1:Quan1:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con1:Quan1:Item3', 'Extr_Num']      <- 44
  dat[dat$crossed=='Con1:Quan1:Item4', 'Exp_Num'] <- 36
  dat[dat$crossed=='Con1:Quan1:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con1:Quan1:Item4', 'Extr_Num']      <- 54
  dat[dat$crossed=='Con1:Quan2:Item1', 'Exp_Num'] <- 24
  dat[dat$crossed=='Con1:Quan2:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con1:Quan2:Item1', 'Extr_Num']      <-  6
  dat[dat$crossed=='Con1:Quan2:Item2', 'Exp_Num'] <- 34
  dat[dat$crossed=='Con1:Quan2:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con1:Quan2:Item2', 'Extr_Num']      <- 16
  dat[dat$crossed=='Con1:Quan2:Item3', 'Exp_Num'] <- 44
  dat[dat$crossed=='Con1:Quan2:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con1:Quan2:Item3', 'Extr_Num']      <- 26
  dat[dat$crossed=='Con1:Quan2:Item4', 'Exp_Num'] <- 54
  dat[dat$crossed=='Con1:Quan2:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con1:Quan2:Item4', 'Extr_Num']      <- 36
  dat[dat$crossed=='Con2:Quan1:Item1', 'Exp_Num'] <-  6
  dat[dat$crossed=='Con2:Quan1:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con2:Quan1:Item1', 'Extr_Num']      <- 24
  dat[dat$crossed=='Con2:Quan1:Item2', 'Exp_Num'] <- 16
  dat[dat$crossed=='Con2:Quan1:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con2:Quan1:Item2', 'Extr_Num']      <- 34
  dat[dat$crossed=='Con2:Quan1:Item3', 'Exp_Num'] <- 26
  dat[dat$crossed=='Con2:Quan1:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con2:Quan1:Item3', 'Extr_Num']      <- 44
  dat[dat$crossed=='Con2:Quan1:Item4', 'Exp_Num'] <- 36
  dat[dat$crossed=='Con2:Quan1:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con2:Quan1:Item4', 'Extr_Num']      <- 54
  dat[dat$crossed=='Con2:Quan2:Item1', 'Exp_Num'] <- 24
  dat[dat$crossed=='Con2:Quan2:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con2:Quan2:Item1', 'Extr_Num']      <-  6
  dat[dat$crossed=='Con2:Quan2:Item2', 'Exp_Num'] <- 34
  dat[dat$crossed=='Con2:Quan2:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con2:Quan2:Item2', 'Extr_Num']      <- 16
  dat[dat$crossed=='Con2:Quan2:Item3', 'Exp_Num'] <- 44
  dat[dat$crossed=='Con2:Quan2:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con2:Quan2:Item3', 'Extr_Num']      <- 26
  dat[dat$crossed=='Con2:Quan2:Item4', 'Exp_Num'] <- 54
  dat[dat$crossed=='Con2:Quan2:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con2:Quan2:Item4', 'Extr_Num']      <- 36
  dat[dat$crossed=='Con3:Quan1:Item1', 'Exp_Num'] <-  6
  dat[dat$crossed=='Con3:Quan1:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con3:Quan1:Item1', 'Extr_Num']      <- 24
  dat[dat$crossed=='Con3:Quan1:Item2', 'Exp_Num'] <- 16
  dat[dat$crossed=='Con3:Quan1:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con3:Quan1:Item2', 'Extr_Num']      <- 34
  dat[dat$crossed=='Con3:Quan1:Item3', 'Exp_Num'] <- 26
  dat[dat$crossed=='Con3:Quan1:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con3:Quan1:Item3', 'Extr_Num']      <- 44
  dat[dat$crossed=='Con3:Quan1:Item4', 'Exp_Num'] <- 36
  dat[dat$crossed=='Con3:Quan1:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con3:Quan1:Item4', 'Extr_Num']      <- 54
  dat[dat$crossed=='Con3:Quan2:Item1', 'Exp_Num'] <- 24
  dat[dat$crossed=='Con3:Quan2:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con3:Quan2:Item1', 'Extr_Num']      <-  6
  dat[dat$crossed=='Con3:Quan2:Item2', 'Exp_Num'] <- 34
  dat[dat$crossed=='Con3:Quan2:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con3:Quan2:Item2', 'Extr_Num']      <- 16
  dat[dat$crossed=='Con3:Quan2:Item3', 'Exp_Num'] <- 44
  dat[dat$crossed=='Con3:Quan2:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con3:Quan2:Item3', 'Extr_Num']      <- 26
  dat[dat$crossed=='Con3:Quan2:Item4', 'Exp_Num'] <- 54
  dat[dat$crossed=='Con3:Quan2:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con3:Quan2:Item4', 'Extr_Num']      <- 36
  dat[dat$crossed=='Con4:Quan1:Item1', 'Exp_Num'] <-  6
  dat[dat$crossed=='Con4:Quan1:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con4:Quan1:Item1', 'Extr_Num']      <- 24
  dat[dat$crossed=='Con4:Quan1:Item2', 'Exp_Num'] <- 16
  dat[dat$crossed=='Con4:Quan1:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con4:Quan1:Item2', 'Extr_Num']      <- 34
  dat[dat$crossed=='Con4:Quan1:Item3', 'Exp_Num'] <- 26
  dat[dat$crossed=='Con4:Quan1:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con4:Quan1:Item3', 'Extr_Num']      <- 44
  dat[dat$crossed=='Con4:Quan1:Item4', 'Exp_Num'] <- 36
  dat[dat$crossed=='Con4:Quan1:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con4:Quan1:Item4', 'Extr_Num']      <- 54
  dat[dat$crossed=='Con4:Quan2:Item1', 'Exp_Num'] <- 24
  dat[dat$crossed=='Con4:Quan2:Item1', 'Bline_Num']     <- 15
  dat[dat$crossed=='Con4:Quan2:Item1', 'Extr_Num']      <-  6
  dat[dat$crossed=='Con4:Quan2:Item2', 'Exp_Num'] <- 34
  dat[dat$crossed=='Con4:Quan2:Item2', 'Bline_Num']     <- 25
  dat[dat$crossed=='Con4:Quan2:Item2', 'Extr_Num']      <- 16
  dat[dat$crossed=='Con4:Quan2:Item3', 'Exp_Num'] <- 44
  dat[dat$crossed=='Con4:Quan2:Item3', 'Bline_Num']     <- 35
  dat[dat$crossed=='Con4:Quan2:Item3', 'Extr_Num']      <- 26
  dat[dat$crossed=='Con4:Quan2:Item4', 'Exp_Num'] <- 54
  dat[dat$crossed=='Con4:Quan2:Item4', 'Bline_Num']     <- 45
  dat[dat$crossed=='Con4:Quan2:Item4', 'Extr_Num']      <- 36
  dat$crossed <- NULL
  # what side LEFT, MIDDLE, RIGHT corresponds with Expected, Borderline, Extreme?
  for (row in 1:nrow(dat)) {
    if (dat[row, 'Exp_Num']   == dat[row, 'Left'])  {dat[row, 'Exp_side']   <- 'left'}
    if (dat[row, 'Exp_Num']   == dat[row, 'Mid'])   {dat[row, 'Exp_side']   <- 'mid'}
    if (dat[row, 'Exp_Num']   == dat[row, 'Right']) {dat[row, 'Exp_side']   <- 'right'}
    if (dat[row, 'Bline_Num'] == dat[row, 'Left'])  {dat[row, 'Bline_side'] <- 'left'}
    if (dat[row, 'Bline_Num'] == dat[row, 'Mid'])   {dat[row, 'Bline_side'] <- 'mid'}
    if (dat[row, 'Bline_Num'] == dat[row, 'Right']) {dat[row, 'Bline_side'] <- 'right'}
    if (dat[row, 'Extr_Num']  == dat[row, 'Left'])  {dat[row, 'Extr_side']  <- 'left'}
    if (dat[row, 'Extr_Num']  == dat[row, 'Mid'])   {dat[row, 'Extr_side']  <- 'mid'}
    if (dat[row, 'Extr_Num']  == dat[row, 'Right']) {dat[row, 'Extr_side']  <- 'right'}
  }
  # what button press did the subject actually make? LEFT, MIDDLE, RIGHT, NOANSWER?
  dat$RESPONSE <- as.factor(dat$RESPONSE)
  # what number of dots corresponds with the subject's button press?
  for (row in 1 : nrow(dat) ) {
    switch(as.character(dat[row,'RESPONSE']),
           'LEFT' = {dat[row, 'response_num'] <- dat[row, 'Left']},
           'MIDDLE' = {dat[row, 'response_num'] <- dat[row, 'Mid']},
           'RIGHT' = {dat[row, 'response_num'] <- dat[row, 'Right']},
           'NOANSWER' = {dat[row, 'response_num'] <- NA})}
  # what side was the subject's button-press? Left, mid right?
  dat$response_side <- tolower(dat$RESPONSE)
  dat$response_side[dat$response_side == "middle"] <- 'mid'
  dat$response_side <- factor(dat$response_side, exclude="noanswer")
  # what category was the subject's response? Expected, Borderline, Extreme
  dat$response_category <- "nocat"
  for (row in row.names(na.omit(dat))) {
    if (dat[row, 'response_num'] == dat[row, 'Exp_Num']) {dat[row, 'response_category'] <- 'expected'}
    if (dat[row, 'response_num'] == dat[row, 'Bline_Num']) {dat[row, 'response_category'] <- 'borderline'}
    if (dat[row, 'response_num'] == dat[row, 'Extr_Num']) {dat[row, 'response_category'] <- 'extreme'}
  }
  dat$response_category <- factor(dat$response_category, exclude="nocat")
  dat$RESPONSE <- NULL
  message('Returning classified data')
  return(dat)
} # end of classifyResponse function
@

<<processDataFunction, echo=FALSE>>=
processData = function(dat) {
  # SUBJECT
  dat$Subject=factor(paste("s",sprintf("%02d",dat$Subject),sep=""))
  # TRIAL
  dat$Trial = rep(x = 1:number_of_trials_per_subject, times = number_of_valid_subjects)
  # make a centred Trial for modeling
  dat$c_Trl <-dat$Trial - mean(dat$Trial)
  # make a scaled Trial for modelling
  dat$s_Trl <- as.numeric(scale(dat$Trial))
  # ID
  # id is a unique identifier for the 7680 row data
  dat$id <- factor(paste(paste(dat$Subject), paste("t", sprintf("%03d", dat$Trial), sep="") , sep=":"))
  # ITEM
  # create a centred numeric item variable for modeling
  dat$c_Itm <- ifelse(dat$Item==1, -.75, ifelse(dat$Item==2, -.25, ifelse(dat$Item==3, .25, .75)))
  # make Item be a factor and assign labels
  dat$Item <- factor(dat$Item, levels=c(1,2,3,4), labels=c("06:15:24", "16:25:34", "26:35:44", "36:45:54"))
  # VAGUENESS
  # Create a factor coding for Vagueness
  dat[ dat$Condition==1 , 'Vagueness'] <- 'Vague'
  dat[ dat$Condition==2 , 'Vagueness'] <- 'Crisp'
  dat[ dat$Condition==3 , 'Vagueness'] <- 'Vague'
  dat[ dat$Condition==4 , 'Vagueness'] <- 'Crisp'
  dat$Vagueness <- as.factor(dat$Vagueness)
  # manually center Vagueness
  dat$c_Vag <- ifelse(dat$Vagueness=='Crisp', -.5, .5)
  # NUMBER
  # Create a factor coding for Number use
  dat[ dat$Condition==1 , 'Number'] <- 'Numeric'
  dat[ dat$Condition==2 , 'Number'] <- 'Numeric'
  dat[ dat$Condition==3 , 'Number'] <- 'Verbal'
  dat[ dat$Condition==4 , 'Number'] <- 'Verbal'
  dat$Number <- as.factor(dat$Number)
  # manually center Number
  dat$c_Num <- ifelse(dat$Number=='Numeric', -.5, .5)
  # CONDITION
  # make a factor out of Condition, as f_Cnd
  dat$f_Cnd <- factor(dat$Condition, levels=c(1,2,3,4), labels=c('Vg:Nm', 'Cr:Nm', 'Vg:Vb', 'Cr:Vb'))
  # ORDER
  # give the levels of Order meaningful names
  dat$Order <- factor(dat$Order, levels=c(1,2), labels=c('LtoR','RtoL'))
  # make a manually centred Order
  dat$c_Ord <- ifelse(dat$Order=="LtoR",-.5,.5)
  # QUANTITY
  # give the levels of Quantity meaningful names
  dat$Quantity <- factor(dat$Quantity, levels=c(1,2), labels=c('Small','Large'))
  # make a manually centred Quantity
  dat$c_Qty <- ifelse(dat$Quantity=="Small",-.5,.5)
  # INSTRUCTION
  # add number of characters in the instruction # 29 30 34 36 38
  dat$nchar_instr = nchar(dat$Instruction)
  dat$nchar_instr_scaled = as.vector(scale(nchar(dat$Instruction), scale=TRUE))
  # make Instruction be a factor (17 levels)
  dat$Instruction <- as.factor(dat$Instruction)
  # RT
  # add transformations of RT
  dat$RT_log       <- log(dat$RT)
  dat$RT_raw       <- dat$RT
  # print to file a table with information about the design
  design_info <- unique(subset(dat, select=c(Item, Condition, Vagueness, Number, Quantity, Order, Left, Mid, Right, Exp_Num, Bline_Num, Extr_Num, Exp_side, Bline_side, Extr_side, Instruction)))
  design.info <- design_info[order(design_info$Item, design_info$Condition, design_info$Quantity, design_info$Order),]
  row.names(design_info) <- NULL
  capture.output(print.data.frame(design_info, row.names=F, print.gap=3, quote=F, right=F), file="design_info-table.txt")
  # Add discriminability metric with reference to item
  discriminability_range = c(0.7500000, 0.5294118, 0.4090909, 0.3333333)
  discriminability_range_scaled = c(1.3441995, 0.1316642, -0.5297187, -0.9461450)  
  discriminability = c(0.4875000, 0.3123529, 0.2308442, 0.1833333)
  discriminability_scaled = c(1.37582241, 0.06614191, -0.54334858, -0.89861574)
  dat[dat$Item == "06:15:24", "discriminability"] <- 0.4875000
  dat[dat$Item == "16:25:34", "discriminability"] <- 0.3123529
  dat[dat$Item == "26:35:44", "discriminability"] <- 0.2308442
  dat[dat$Item == "36:45:54", "discriminability"] <- 0.1833333
  # put dat in better column order
  dat <- subset(dat, select = c(id, Subject, Trial, Condition, Order, 
                           Quantity, Vagueness, Number, Item, discriminability, 
                           c_Trl, s_Trl, c_Itm, c_Vag, c_Num, f_Cnd, c_Ord, c_Qty,
                           RT, RT_log, RT_raw, Exp_Num, Bline_Num, 
                           Extr_Num, Exp_side, Bline_side, Extr_side, 
                           response_num, response_side, response_category, 
                           Left, Mid, Right, Instruction, nchar_instr))
  # This data set (dat) contains *all* trials 7680 including impossible trials and is mainly for graphs comparing different removals
  save(dat, file='data_raw.Rda')
  message('Returning processed data')
  return(dat)
} # end of function processData
@


<<postProcessDataFunction, echo=FALSE>>=
postProcessData = function(dat) {
  # dd removes impossible trials from dat
  # Throw out RT = 1 and RT = 59998, and RTprev = 1 and RTprev = 59998 i.e., throw out sticky fingers and timeouts, and the trials that followed sticky fingers and timeouts since they were likely affected by unusual previous trials. Also lose impossible trials
  dd <- dat
  dd$RT[dd$RT == 1 ] <- NA
  dd$RT[dd$RT == 59998 ] <- NA
  dd <- dd[complete.cases(dd),]
  row.names(dd) <- NULL
  # add preceding RT: because we removed impossible trials, the value for preceding RT for a trial following an impossible trial is the value of the trial that preceded the impossible trial.
  dd$RTprev <- NA
  for (s in levels(dd$Subject)) {
    nrows = nrow(dd[dd$Subject==s,])
    for (i in 1:nrows) {
      if (i==1) {dd[dd$Subject==s, "RTprev"][i] <- dd[dd$Subject==s, "RT"][i]}
      else
        dd[dd$Subject==s, "RTprev"][i] <- dd[dd$Subject==s, "RT"][i-1] }}
  # add transformations of previous RT
  dd$RTprev_log       <- log(dd$RTprev)
  dd$RTprev_raw       <- dd$RTprev
  # put dd in better column order
  dd <- subset(dd, select = c(id, Subject, Trial, Condition, Order, Quantity, Vagueness, Number, Item, discriminability, c_Trl, s_Trl, c_Itm, c_Vag, c_Num, f_Cnd, c_Ord, c_Qty, RT, RT_log, RT_raw, RTprev, RTprev_log, RTprev_raw, Exp_Num, Bline_Num, Extr_Num, Exp_side, Bline_side, Extr_side, response_num, response_side, response_category, Left, Mid, Right, Instruction, nchar_instr ))
  save(dd, file="data_processed.Rda")
  message('Returning post processed data')
  return(dd)
} # end of function postProcessResponses
@

\clearpage
\section{Get the data}

<<getTheData>>=
# if the file data_processed.Rda already exists then load it, else do data wrangling
if( file.exists('data_processed.Rda') ) {
  load('data_processed.Rda')
} else {
  # declare local variables
  number_of_valid_subjects <- 30 # = 30
  number_of_rows <- 7680 # 7680
  number_of_trials_per_subject <- number_of_rows / number_of_valid_subjects # = 256
  # call functions
  dat <- gatherData(number_of_valid_subjects) # = 30
  dat <- classifyResponses(dat) # classify the response as expected, near, or far
  dat <- processData(dat) # remove impossible trials and re-do previous rt measures
  dd  <- postProcessData(dat)
} # end else do data wrangling
@  

<<showDataNames>>=
names(dd)
@

<<showDataHead>>=
head(dd)
@

<<showDataSummary>>=
summary(dd)
@

<<showDataStructure>>=
str(dd)
@

\clearpage
\section{Plots}
\clearpage
\subsection{Discriminability}

<<showCompression, fig.width=6, fig.height=4, fig.pos='hbtp', fig.cap='Ratios for different numbers of dots in the arrays: smaller values are more discriminable. Blue is for the ratio between the smallest number in the array and the largest number in an array. Red is for the mean of two ratios, one for the smallest number to the middle number, the other for the middle number to the largest number in the array', echo=FALSE>>=
#  Show compression of ratios of numbers of dots in the items
discriminability = sort(unique(as.numeric(dd$discriminability)))
plot(y=c(1.5,1.5,1.5,1.5), 
     x=discriminability, 
     ylab='',
     xlab='',
     yaxt='n',
     type='n', 
     xaxt='n',
     axes=F)
lines(y=c(1.5,1.5,1.5,1.5), x=discriminability, type='o', pch=19)
text(y=c(1.15,1.15,1.15,1.15), x=discriminability, labels=round(discriminability,2),  cex=.7)
mtext('mean (ratio min/med,\nratio med/max)', side = 2, line = 1)
mtext('Discriminability index', side=1, line=3)
mtext('Discriminability for each item', side=3, line=1, cex=1.5)
axis(1)
box(col='grey')
#text(y=1.00, x=0.07, labels="mean\n(ratio min/med,\nratio med/max)", col='red')
# axis(1, at=seq(-.1, 1,0.1)[4:11])
# axis(1)
@

\clearpage

<<prepPlotData, echo=FALSE>>=
# first create a data frame specially for transformations
# this won't be used for analysis, just for this plot
load('data_raw.Rda') # dat
dat_transforms <- dat
# dfSubset says whether any data points were removed
dat_transforms$dfSubset <- "original"
# RTtype says whether the row contains data for an observed RT or 
# a sample from a normal distribution with the same mean and sd
dat_transforms$RTtype <- "observed"
# create extra rows for dfs with removed (outlier) data points
dat3 <- subset(dat_transforms, RT>1 & RT<59999)              # nrow 7677
dat3$dfSubset <- "RT>1&RT<59999"
dat4 <- subset(dat_transforms, RT>1 & RT<59999 & RT<30001)   # nrow 7658
dat4$dfSubset <- "RT>1&RT<30001"
# bring the dfs back into main df
dat_transforms <- rbind(dat3, dat4)
dat_transforms$dfSubset <- factor(dat_transforms$dfSubset, levels=c("RT>1&RT<59999", "RT>1&RT<30001"))
# create extra rows for normally distributed transformed variables
dato = dat_transforms
datn = dat_transforms; datn$RTtype <- "normal"
dat_transforms <- rbind(dato,datn)
dat_transforms$RTtype <- factor(dat_transforms$RTtype, levels=c("observed","normal"))
# for safety
dat_transforms[dat_transforms$RTtype=="normal", c("RT_log", "RT_raw")] <- NA
# Create the normally distributed transformed variables, replacing the NAs declared above
for (k in levels(dat_transforms$dfSubset)){
  dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="normal", "RT_log"]  <- 
    rnorm(n=length(dat_transforms[dat_transforms$dfSubset==k  & dat_transforms$RTtype=="observed", "RT_log"]), 
          mean=mean(dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="observed", "RT_log"]), 
          sd=sd(dat_transforms[dat_transforms$dfSubset==k     & dat_transforms$RTtype=="observed", "RT_log"]))
  dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="normal", "RT_raw"]  <- 
    rnorm(n=length(dat_transforms[dat_transforms$dfSubset==k  & dat_transforms$RTtype=="observed", "RT_raw"]), 
          mean=mean(dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="observed", "RT_raw"]), 
          sd=sd(dat_transforms[dat_transforms$dfSubset==k     & dat_transforms$RTtype=="observed", "RT_raw"]))
}# end of create normally distributed equivalents for the data transforms.
@

<<plotDistFreqPolys, fig.width=6, fig.height=4, fig.cap='Compare distributions of the various transformations of RT against random samples from normal distributions with the same mean and sd to see which transformations best approximate normal distributions', fig.pos='hbtp', fig.align='center', message=FALSE, warning=FALSE, echo=FALSE>>=
temp <- reshape2::melt(dat_transforms, 
                       id.vars=c("dfSubset", "RTtype", "Item", "Vagueness", "Number", "Quantity", "Order"),
                       measure.vars=c("RT_log", "RT_raw"),
                       variable.name="transformation",
                       value.name="time")
ggplot(temp, aes(time, colour=RTtype)) + 
  geom_freqpoly() + 
  facet_wrap(transformation~dfSubset, scales='free', ncol=4, nrow=1) + 
  scale_color_manual('RT Type: ', values=c("blue","red")) + 
  theme_bw() + 
  theme(aspect.ratio=1, 
        text=element_text(family='CMU Serif', size=10, face='plain'),
        axis.title.x=element_blank(),
        axis.text.x=element_text(angle=25),
        panel.grid=element_blank(),
        legend.position='top',
        legend.key=element_rect(color = 'white'))
@

\clearpage

<<plotBoxPlots, fig.width=6, fig.height=4, fig.cap='Show how transformations of RT affect distribution of times, and how they affect which times are outliers.', fig.pos='hbtp', echo=FALSE>>=
load('data_processed.Rda')
# allow reference to transformation
subdata = reshape2::melt(dd,
                         measure.vars=c("RT_log", "RT_raw"),
                         variable.name="transformation",
                         value.name="value") 
# boxplots for subjects and items separately for each dependent variable
ggplot(subdata) + 
  facet_wrap(~ transformation, scales="free", ncol=2, nrow=1) +
  geom_boxplot(aes(y=value, x=Item, col="Items"), outlier.colour = "black", outlier.shape = 21, outlier.size=0.1) + 
  geom_boxplot(aes(y=value, x=Subject, col="Subjects"), outlier.colour = "black", outlier.shape = 21, outlier.size=0.1) + 
  theme_bw() +
  theme(aspect.ratio=1, 
        text=element_text(family='CMU Serif', size=10, face='plain'),
        panel.grid=element_blank(),
        axis.ticks.x=element_blank(),
        axis.text.x=element_blank(),
        legend.position='top',
        legend.key=element_rect(color = 'white')) + 
  scale_colour_manual("",values=c("Items"="orange","Subjects"="blue")) +
  xlab("") + ylab("")
@

\clearpage

<<plotFastSlowRTs, fig.width=6, fig.height=4, fig.cap='Show how mean times for individual subjects and items vary with respect to the grand mean Log RT.', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
# Show how mean times for individual subjects and items vary with respect to the grand mean RT.
subs=ddply(dd, .(level=Subject), 
           summarise, effect="subject", emean=mean(dd$RT_log), lmean=mean(RT_log),
           ldiff=mean(RT_log)-mean(dd$RT_log))
subs$level=1:30
subs$effect <- factor(subs$effect, levels=c("subject", "discriminability"))
itms=ddply(dd, .(level=discriminability), 
           summarise, effect="discriminability", emean=mean(dd$RT_log), lmean=mean(RT_log), 
           ldiff=mean(RT_log)-mean(dd$RT_log))
itms$effect <- factor(itms$effect, levels=c("subject", "discriminability"))
si=rbind(subs,itms)
si$effect <- factor(si$effect, levels=c("subject", "discriminability"))
my1 <- xyplot(data=si, lmean~level | effect, 
              aspect=1,
              layout=c(2,1),
              ylim = extendrange(si$lmean, f = 0.10),
              par.settings=list(trellis.par.set(superpose.symbol = list(col='black'), 
                                                superpose.line=list(col='black'))),
              xlab=NULL,
              ylab='Log RT',
              #main='How mean times for individual subjects and items\nvary with respect to the grand mean Log RT',
              mean=unique(si$emean),
              scales=list(x=list(relation="free", at=NULL, 
                                 labels=list("subject number", "item identifier"), cex=1 ),
                          y=list(at = c(0, 7, unique(si$emean), 8, 9),
                                 labels=c("0", "7", "Mean", "8", "9"))),
              panel=function(x,y,type,subscripts,...){
                panel.abline(h=unique(si$emean), col="lightgrey",lty=1,...)
                panel.arrows(x0=x, y0=unique(si$emean), x1=x, y1=y, subscripts=subscripts, code=3, length=0, ...)
                panel.xyplot(x,y,type='p', pch=21, cex=.5, col='black', fill='black', subscripts=subscripts,...)
              }
) # end of my1
my2 <- xyplot(data=si, ldiff~level | effect, 
              aspect=1, type='n',
              ylab="Deviation from\nmean Log RT",
              ylim=extendrange(si$ldiff,f=0.10)
) # creates a second y-axis scale
print(doubleYScale(my1, my2, 
                   add.axis=TRUE, 
                   add.ylab2=TRUE, 
                   use.style=FALSE))
@

\clearpage

<<plotMainsa, fig.width=6, fig.height=4, fig.cap='Plot main effects on several transformations', fig.pos='hbtp', message=FALSE, echo=FALSE, warning=FALSE>>=
# plot main effects on observed data
# allow reference to transformation
temp <- reshape2::melt(dd,
                       id.vars=c("Item", "Vagueness", "Number", "Quantity", "Order"),
                       measure.vars=c("RT_log",  "RT_raw"),
                       variable.name="transformation",
                       value.name="score")
# allow reference to effect
temp2 <- reshape2::melt(temp,
                        id.vars=c("transformation", "score"),
                        measure.vars=c("Item", "Vagueness", "Number", "Quantity", "Order"),
                        variable.name="effect",
                        value.name="level")
# do the plot
ggplot(temp2, aes(y=score, x=level, group=1, col=effect)) +
  facet_wrap(~transformation + effect, scales="free", ncol=5) +
  stat_summary(fun.data=mean_cl_normal, geom="pointrange") +
  stat_summary(fun.y=mean, geom="line") +
  theme_bw() +
  theme(aspect.ratio=1, 
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1, size=8),
        legend.position="none") +
  ylab('Response latency\n') + xlab('')
@

\clearpage

<<mainB, fig.width=6, fig.height=4, fig.cap='Just the main effects', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
# prep main effects rts data frame
vrts <- cbind(Effect="Vagueness",x=factor(c(1,2)),summarySEwithin(dd, measurevar="RT_log", withinvars=c("Vagueness")));names(vrts)[3]<-"Levels"
nrts <- cbind(Effect="Number",x=factor(c(1,2)), summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number")));names(nrts)[3]<-"Levels"
qrts <- cbind(Effect="Quantity",x=factor(c(1,2)), summarySEwithin(dd, measurevar="RT_log", withinvars=c("Quantity")));names(qrts)[3]<-"Levels"
orts <- cbind(Effect="Order",x=factor(c(1,2)), summarySEwithin(dd, measurevar="RT_log", withinvars=c("Order")));names(orts)[3]<-"Levels"
irts <- cbind(Effect="Item",x=factor(c(1,2,3,4)), summarySEwithin(dd, measurevar="RT_log", withinvars=c("Item")));names(irts)[3]<-"Levels"
rts=rbind(vrts,nrts,qrts,orts)
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
# plot main effects
ggplot(rts, aes(y=RT_log, x=Levels, group=1, ymin=mins, ymax=maxs)) +
  geom_line() +
  geom_errorbar(width=.05) +
  geom_point(pch=19) +
  facet_grid(~Effect, scale="free_x") +
  theme_bw() +
  theme(aspect.ratio=1,
        axis.text.x = element_text(size=8),
        axis.text.y = element_text(size=8, angle=15),
        panel.grid=element_blank()) +
  ylab("RT (log)") + xlab('')
@

\clearpage

<<mainD, fig.width=6, fig.height=5, fig.cap='Main effects over item ratios', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
nrts <- cbind(Effect="Number",
              xlev=factor(c(1,2)), 
              myshape='a',
              summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability","Number")))
names(nrts)[5]<-"Levels"

orts <- cbind(Effect="Order",
              xlev=factor(c(1,2)), 
              myshape='b',
              summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability","Order")))
names(orts)[5]<-"Levels"

qrts <- cbind(Effect="Quantity",
              xlev=factor(c(1,2)), 
              myshape='d',
              summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability","Quantity")))
names(qrts)[5]<-"Levels"

vrts <- cbind(Effect="Vagueness",
              xlev=factor(c(1,2)),
              myshape='e',
              summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability","Vagueness")))
names(vrts)[5]<-"Levels"

rts=rbind(nrts,orts,qrts,vrts)
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
rts$discriminability <- as.numeric(as.character(rts$discriminability))
#rts$myshape=rep(c(21,22,23,24), each=8)

p1=
  ggplot(data=rts, aes(x=discriminability, y=RT_log, group=Levels)) +
  geom_errorbar(data=droplevels(subset(rts, Effect=='Number')),width=.01, aes(ymin=mins, ymax=maxs)) +
  geom_line(data=droplevels(subset(rts, Effect=='Number'))) +
  geom_point(data=droplevels(subset(rts, Effect=='Number')),
             aes(shape=Levels, fill=Levels), size=3 ) +
  geom_errorbar(data=droplevels(subset(rts, Effect=='Order')), width=.01, aes(ymin=mins, ymax=maxs)) +
  geom_line(data=droplevels(subset(rts, Effect=='Order'))) +
  geom_point(data=droplevels(subset(rts, Effect=='Order')),
             aes(shape=Levels, fill=Levels), size=3  ) +
  geom_errorbar(data=droplevels(subset(rts, Effect=='Quantity')),width=.01, aes(ymin=mins, ymax=maxs)) +
  geom_line(data=droplevels(subset(rts, Effect=='Quantity'))) +
  geom_point(data=droplevels(subset(rts, Effect=='Quantity')),
             aes(shape=Levels, fill=Levels), size=3  ) +
  geom_errorbar(data=droplevels(subset(rts, Effect=='Vagueness')),width=.01, aes(ymin=mins, ymax=maxs)) +
  geom_line(data=droplevels(subset(rts, Effect=='Vagueness'))) +
  geom_point(data=droplevels(subset(rts, Effect=='Vagueness')),
             aes(shape=Levels, fill=Levels), size=3  ) +
  facet_grid(~Effect) +
  scale_shape_manual(values = c(
    "Numeric"=21,
    "Verbal"=21,
    "LtoR"=22,
    "RtoL"=22,
    "Small"=23,
    "Large"=23,
    "Crisp"=24,
    "Vague"=24),
    breaks=c('Numeric','Verbal','LtoR','RtoL','Small','Large','Crisp','Vague'))  +
  scale_fill_manual(values = c(
    "Numeric"="black",
    "Verbal"="white",
    "LtoR"="black",
    "RtoL"="white",
    "Small"="black",
    "Large"="white",
    "Crisp"="black",
    "Vague"="white"),
    breaks=c('Numeric','Verbal','LtoR','RtoL','Small','Large','Crisp','Vague')) +
  scale_x_continuous(minor_breaks=NULL,
                     breaks=1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667),
                     labels=abbreviate(1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667))) +
  theme_bw() +
  theme(aspect.ratio=1,
        legend.position='top',
        axis.text.x=element_text(size=8, angle=35),
        axis.text.y=element_text(size=8, angle=15),
        legend.key=element_rect(color = 'white')
        #,        panel.grid=element_blank()
        ) +
  ylab("RT (log)") + xlab("Item discriminability measure")
p1
@

\clearpage

<<22way, fig.width=7, fig.height=7, fig.cap='2-way interactions over item ratios', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
# prep 2 ways over items rts data frame
rts1 <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability", "Vagueness","Number")); names(rts1)[2] <- "F1"; names(rts1)[3] <- "F2"
rts1$E1 <- "Vagueness"
rts1$E2 <- "Number"
rts2 <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability", "Vagueness","Quantity")); names(rts2)[2] <- "F1"; names(rts2)[3] <- "F2"
rts2$E1 <- "Vagueness"
rts2$E2 <- "Quantity"
rts3 <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability", "Vagueness","Order")); names(rts3)[2] <- "F1"; names(rts3)[3] <- "F2"
rts3$E1 <- "Vagueness"
rts3$E2 <- "Order"
rts4 <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability", "Quantity", "Number")); names(rts4)[2] <- "F1"; names(rts4)[3] <- "F2"
rts4$E1 <- "Quantity"
rts4$E2 <- "Number"
rts5 <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability", "Order","Number")); names(rts5)[2] <- "F1"; names(rts5)[3] <- "F2"
rts5$E1 <- "Order"
rts5$E2 <- "Number"
rts6 <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("discriminability", "Quantity","Order")); names(rts6)[2] <- "F1"; names(rts6)[3] <- "F2"
rts6$E1 <- "Quantity"
rts6$E2 <- "Order"
rts <- rbind(rts1,rts2,rts3,rts4,rts5,rts6)
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
rts$discriminability <- as.numeric(as.character(rts$discriminability))
rts$F3 <- factor(paste(rts$F1,rts$F2))
rts$E1 <- factor(rts$E1, levels=c("Number","Order","Quantity","Vagueness"))
rts$E2 <- factor(rts$E2, levels=c("Number","Order","Quantity","Vagueness"))
# The palette with black:
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(rts, aes(y=RT_log, x=discriminability, group=F3, col=F2, pch=F1)) +
  facet_grid(E2~E1, drop=F) +
  geom_point() +
  geom_line() +
  theme_bw() +
  theme(
    aspect.ratio=1
    #,  panel.grid=element_blank()
    , axis.text.x=element_text(size=7, angle=45,hjust=1)
    , axis.text.y=element_text(size=7)
    ) +
  scale_color_manual(name="colour",values=cbbPalette) +
  scale_shape_discrete(name="shape") +
  #scale_x_continuous(breaks = round(sort(unique(rts$discriminability)),1)) +
  scale_x_continuous(minor_breaks=NULL,
                     breaks=1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667),
                     labels=abbreviate(1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667))) 
@

\clearpage

<<plotInt1, fig.width=6, fig.height=4, fig.cap='vagueness by number interaction over items', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number","Vagueness","Item"))
rts$condition=paste(rts$Number,rts$Vagueness, sep= ' ')
dodge = position_dodge(width=0.2)
ggplot(rts, aes(y=RT_log, x=Item, ymin=RT_log-ci, ymax=RT_log+ci,
                group=condition, shape=condition, fill=condition)) +
  geom_line(position=dodge) +
  geom_errorbar(width=.2, position=dodge) +
  geom_point(size=4, position=dodge) +
  scale_shape_manual("",values = c(22, 22, 21, 21)) +
  scale_fill_manual("",values=c("black","white","black","white")) +
  ggtitle("Response time") +
  ylab("RT_log") +
  xlab("") +
  theme_bw() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        legend.key = element_blank(), aspect.ratio=1,
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(~Number) 
@

\clearpage

<<plotInt2, fig.width=6, fig.height=4, fig.cap='vagueness by number interaction over item ratios', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number","Vagueness","discriminability"))
rts$discriminability <- as.numeric(as.character(rts$discriminability))
rts$condition=paste(rts$Number,rts$Vagueness, sep= ' ')

ggplot(rts, aes(y=RT_log, x=discriminability, ymin=RT_log-ci, ymax=RT_log+ci,
                group=condition, shape=condition, fill=condition)) +
  geom_line(position = position_dodge(width=0.005)) +
  geom_errorbar(position = position_dodge(width=0.005)) +
  geom_point(position = position_dodge(width=0.005), cex=3) +
  scale_shape_manual("",values = c(22, 22, 21, 21)) +
  scale_fill_manual("",values=c("black","white","black","white")) +
  ggtitle("Response time") +
  ylab("RT_log") +
  xlab("") +
  theme_bw() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        legend.key = element_blank(), aspect.ratio=1,
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(~Number) +
  scale_x_continuous(minor_breaks=NULL,
                     breaks=1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667),
                     labels=abbreviate(1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667)))
@

\clearpage

<<plot3way, fig.width=7, fig.height=7, fig.pos='hbtp', fig.cap='3 way interactions',echo=FALSE>>=
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number","Vagueness","Quantity"))
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
p1=ggplot(rts, aes(y=RT_log, x=Number, group=Vagueness, ymin=mins, ymax=maxs, pch=Vagueness)) +
  geom_line() +
  geom_errorbar(width=.1) +
  geom_point(cex=3) +
  facet_grid(~Quantity, scale="free_x") +
  theme_bw() +
  theme(aspect.ratio=1) +
  theme(legend.title=element_blank(), legend.position="top")
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number","Vagueness","Order"))
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
p2=ggplot(rts, aes(y=RT_log, x=Number, group=Vagueness, ymin=mins, ymax=maxs, pch=Vagueness)) +
  geom_line() +
  geom_errorbar(width=.1) +
  geom_point(cex=3) +
  facet_grid(~Order, scale="free_x") +
  theme_bw() +
  theme(aspect.ratio=1) +
  theme(legend.title=element_blank(), legend.position="top")
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number","Quantity","Order"))
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
p3=ggplot(rts, aes(y=RT_log, x=Number, group=Quantity, ymin=mins, ymax=maxs, pch=Quantity)) +
  geom_line() +
  geom_errorbar(width=.1) +
  geom_point(cex=3) +
  facet_grid(~Order, scale="free_x") +
  theme_bw() +
  theme(aspect.ratio=1) +
  theme(legend.title=element_blank(), legend.position="top")
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Vagueness","Quantity","Order"))
rts$mins=rts$RT_log-rts$ci
rts$maxs=rts$RT_log+rts$ci
p4=ggplot(rts, aes(y=RT_log, x=Vagueness, group=Quantity, ymin=mins, ymax=maxs, pch=Quantity)) +
  geom_line() +
  geom_errorbar(width=.1) +
  geom_point(cex=3) +
  facet_grid(~Order, scale="free_x") +
  theme_bw() +
  theme(aspect.ratio=1) +
  theme(legend.title=element_blank(), legend.position="top")
grid.arrange(nrow=2, p1,p2,p3,p4)
@

\clearpage

<<vnitems, fig.width=6, fig.height=4, fig.pos='hbtp', fig.cap='Plot vagueness by number by quantity over item ratios.',message = FALSE, echo=FALSE>>=
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number","Vagueness","discriminability", "Quantity"))
rts$condition=paste(rts$Number,rts$Vagueness, sep= ' ')
rts$discriminability <- as.numeric(as.character(rts$discriminability))
ggplot(rts, aes(y=RT_log, 
                x=discriminability, 
                ymin=RT_log-ci, 
                ymax=RT_log+ci,
                group=Vagueness,
                fill=Vagueness,
                shape=Vagueness)) +
  geom_line(position=position_dodge(width=.025)) +
  geom_errorbar(position=position_dodge(width=.025), width=.02) +
  geom_point(position=position_dodge(width=.025), cex=3) +
  scale_shape_manual("",values = c(22, 21)) +
  scale_fill_manual("",values=c("black","white")) +
  ggtitle("Response time") +
  ylab("RT_Rec_Sqt") +
  xlab("Item discriminability") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        panel.background=element_rect(fill="white",color=1),
        legend.key = element_blank(),
        aspect.ratio=1, 
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(~Number+Quantity) +
    scale_x_continuous(minor_breaks=NULL,
                     breaks=1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667),
                     labels=abbreviate(1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667)))
@

\clearpage

<<4way, fig.width=6, fig.height=4, fig.pos='hbtp', fig.cap='4 way interaction', echo=FALSE>>=
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number", "Vagueness",  "Quantity", "Order"))
rts$condition=paste(rts$Number,rts$Vagueness, sep= ' ')
ggplot(rts, aes(y=RT_log, x=Vagueness, ymin=RT_log-ci, ymax=RT_log+ci, group=Quantity, pch=Quantity)) +
  facet_grid(~Order+Number, scale="free_x") +
  geom_line(position = position_dodge(width = 0.2)) +
  geom_errorbar(position = position_dodge(width = 0.2), width=.1) +
  geom_point(position = position_dodge(width = 0.2), cex=3) +
  theme_bw() + 
  theme(aspect.ratio=1) +
  theme(legend.title=element_blank(),
        legend.position='right',
        legend.key=element_rect(color = 'white'))  
@

\clearpage

<<4waysplit, fig.width=7, fig.height=7, fig.cap='4 way interaction split over item discriminability', fig.pos='hbtp', message=FALSE, echo=FALSE>>=
rts <- summarySEwithin(dd, measurevar="RT_log", withinvars=c("Number", "Vagueness", "discriminability", "Quantity", "Order"))
rts$condition=paste(rts$Number,rts$Vagueness, sep= ' ')
rts$discriminability <- as.numeric(as.character(rts$discriminability))
ggplot(rts, 
       aes(y=RT_log, x=discriminability, ymin=RT_log-ci, ymax=RT_log+ci, group=Vagueness, fill=Vagueness)
       ) +
  facet_grid(Vagueness+Order~Number+Quantity) +
  geom_line() +
  geom_errorbar(width=.02) +
  geom_point(pch=21, size=2) +
  scale_fill_manual("",values=c("black","white","black","white")) +
  ggtitle("Number * Vagueness * Quantity * Order") +
  ylab("RT_log") +
  xlab("") +
  theme_bw() +
  theme( legend.key = element_blank(), 
         axis.text.x = element_text(angle = 45, hjust = 1, size=8), 
         axis.text.y = element_text(angle = 45, hjust = 1, size=6),
         aspect.ratio=1) + 
  scale_x_continuous(minor_breaks=NULL,
                     breaks=1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667),
                     labels=abbreviate(1-c(0.5125000, 0.6876471, 0.7691558, 0.8166667)))
@

\clearpage
\section{Lmer model}

<<rmme>>=
load("data_processed.Rda")
@

<<lmer5, tidy=FALSE, cache=TRUE>>=
v5 <- lme4::lmer(data=dd,
                 RT_log ~
                   c_Vag + c_Num + c_Qty + c_Ord +
                   c_Num:c_Vag:c_Qty +
                   discriminability +
                   s_Trl +
                   RTprev_log +
                   nchar_instr +
                   (1+c_Vag + c_Num + c_Qty + c_Ord|Subject))
@

<<printXtableV5, echo=FALSE, results='asis'>>=
print(
  xtable(
    coef(summary(v5)
         ),
  caption = 'xtable v5'
  ),
  table.placement='htbp',
  latex.environments='',
  size='small'
)
@

<<rSquaredInfo, echo=FALSE>>=
cat("R^2")
cor(fitted(v5), dd$RT_log)^2
@

\clearpage 

<<plotModelCoefsAndCis, fig.width=6, fig.height=4, fig.cap='Coefficient estimates and their (Wald) 95 per cent confidence intervals', fig.pos='hbtp', echo=FALSE>>=
# Plot model coefficients and ci's
dfr <- data.frame(coef = summary(v5)$coef[-1, 1], 
                     ci2.5  = confint(v5, method='Wald')[18:26, 1],
                     ci97.5 = confint(v5, method='Wald')[18:26, 2] )
dfr <- dfr[rev(rownames(dfr)),]
par(mar=c(5,10,1,1))
plot(y=1:nrow(dfr), 
     x=dfr$coef, 
     xlim=range(dfr$ci2.5, dfr$ci97.5), 
     type='n', axes=F, xlab="", ylab="")
abline(v=0, lty=3, col='grey')
abline(h=c(1,2,3,4,5,6,7,8,9), col='grey', lty=3)
arrows(y0=1:nrow(dfr), y1=1:nrow(dfr), 
       x0=dfr$ci2.5, x1=dfr$ci97.5, 
       length=0.035,
       col='black',
       lwd=2, code=3, angle=90)
points(y=1:nrow(dfr), x=dfr$coef, pch=21, bg='white')
axis(2, labels=row.names(dfr), at=1:nrow(dfr), las=1, tick=FALSE)
axis(1)
mtext("Coefficient estimates, in units of log(RT),\nwith 95% confidence intervals", side=1, line=3.5, cex.lab=1, las=1)
mtext("Model terms", side=2, line=8)
box(col='grey')
@


\clearpage 

<<plotLMERfnc, fig.width=6, fig.height=4, fig.pos='hbtp', fig.cap='plotMLERfnc', echo=TRUE>>=
par(mfrow=c(2,4))
plotLMER.fnc(v5)
@

\clearpage

<<baayenPLots99, fig.width=6, fig.height=4, fig.cap='Baayen Model Criticism Plots', fig.pos='hbtp', echo=FALSE>>=
# Baayen 4-plot model criticism
par(mfrow=c(1,3), pty='s')
# create scaled residuals
dd$rstand = as.vector(scale(resid(v5)))
# plot scaled residuals density
plot(density(dd$rstand))
# plot sample quantiles versus theoretical quantiles
qqnorm(dd$rstand, cex=.5)
qqline(dd$rstand)
# plot standardised residuals versus fitted values
plot(dd$rstand ~ fitted(v5), pch='.')
# absolute standardised residuals greater than 2.5 are candidates for being outliers, the abline identifies them on the plot
abline(h=c(-2.5,2.5))
@

\clearpage

\section{lmerTest Version}

<<lmerTestVersionOfModel, cache=TRUE>>=
v6 <- lmerTest::lmer(data=dd,
RT_log ~
c_Vag + c_Num + c_Qty + c_Ord +
c_Num:c_Vag:c_Qty +
discriminability +
s_Trl +
RTprev_log +
nchar_instr +
(1+c_Vag + c_Num + c_Qty + c_Ord|Subject))
@

<<summaryLmerTest, cache=TRUE>>=
summary(v6)
@

\clearpage
\section{Borderline responses}

<<barplotBorderline, fig.width=6, fig.height=4, echo=FALSE>>=
dd$response_category <- relevel(dd$response_category, ref = 'expected')
#barplot(table(dd$response_category,dd$Vagueness), beside=TRUE, legend=TRUE)
barplot(table(dd$Vagueness,dd$response_category), beside=TRUE, legend=TRUE, space=c(0,.5))
@

<<tabBdl, echo=FALSE, results='asis'>>=
print(xtable(table(dd$response_category,dd$Vagueness),
             caption='Borderline cases counts'),
      table.placement='htbp',
      latex.environments='center',
      size='small')
@

\end{document}
