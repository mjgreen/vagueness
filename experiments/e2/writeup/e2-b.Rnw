\documentclass{article}

\usepackage{placeins}
\begin{document}


<<loadKnitr, echo=FALSE>>=
suppressPackageStartupMessages(library(knitr))
@

<<loadLibs, echo=FALSE, message=FALSE>>=
library(beepr)                     #
library(car)                       #
library(ggplot2)                   #
library(grid)                      #
library(gridExtra)                 #
library(languageR)                 #
library(lattice)                   #
library(latticeExtra)              # for doubleYScale
library(lme4)                      #
library(lmerTest)                  #
library(LMERConvenienceFunctions)  # for perSubjectTrim
library(MASS)                      #
library(plyr)                      #
library(reshape2)                  #
library(rms)                       # for varclus
library(Rmisc)                     # for summarySEwithin and friends
library(xtable)                    #
@


\section{Get the data}

<<getTheData, echo=1:4>>=
# if the file data.Rda already exists then load it, else do data wrangling
if( file.exists('data_processed.Rda') ) {
	load('data_processed.Rda')
	} else {
	gatherData = function(number_of_valid_subjects) {
		data_dir <- '../experimentCode/output/'
		column.headers.df <-  head( read.table(
			paste(data_dir,'subject01.data',sep=''),
			header=TRUE),0)
		gathered.data <- column.headers.df
		for (subject in 1:number_of_valid_subjects) {
			current.filename <- paste(data_dir, 'subject', sprintf("%02d",subject), '.data', sep='')
			current.data <- read.table(file=current.filename, header=TRUE, stringsAsFactors = FALSE)
			gathered.data <- rbind(gathered.data, current.data)
		}
		return(gathered.data)
	} # end of gatherData function
	classifyResponse = function(dat) {
		# what were they expected to respond?
		dat$crossed = as.factor(paste('Con', dat$Condition, ':Quan', dat$Quantity, ':Item', dat$Item, sep=''))
		dat[dat$crossed=='Con1:Quan1:Item1', 'Exp_Num'] <-  6
		dat[dat$crossed=='Con1:Quan1:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con1:Quan1:Item1', 'Extr_Num']      <- 24
		dat[dat$crossed=='Con1:Quan1:Item2', 'Exp_Num'] <- 16
		dat[dat$crossed=='Con1:Quan1:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con1:Quan1:Item2', 'Extr_Num']      <- 34
		dat[dat$crossed=='Con1:Quan1:Item3', 'Exp_Num'] <- 26
		dat[dat$crossed=='Con1:Quan1:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con1:Quan1:Item3', 'Extr_Num']      <- 44
		dat[dat$crossed=='Con1:Quan1:Item4', 'Exp_Num'] <- 36
		dat[dat$crossed=='Con1:Quan1:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con1:Quan1:Item4', 'Extr_Num']      <- 54
		dat[dat$crossed=='Con1:Quan2:Item1', 'Exp_Num'] <- 24
		dat[dat$crossed=='Con1:Quan2:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con1:Quan2:Item1', 'Extr_Num']      <-  6
		dat[dat$crossed=='Con1:Quan2:Item2', 'Exp_Num'] <- 34
		dat[dat$crossed=='Con1:Quan2:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con1:Quan2:Item2', 'Extr_Num']      <- 16
		dat[dat$crossed=='Con1:Quan2:Item3', 'Exp_Num'] <- 44
		dat[dat$crossed=='Con1:Quan2:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con1:Quan2:Item3', 'Extr_Num']      <- 26
		dat[dat$crossed=='Con1:Quan2:Item4', 'Exp_Num'] <- 54
		dat[dat$crossed=='Con1:Quan2:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con1:Quan2:Item4', 'Extr_Num']      <- 36
		dat[dat$crossed=='Con2:Quan1:Item1', 'Exp_Num'] <-  6
		dat[dat$crossed=='Con2:Quan1:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con2:Quan1:Item1', 'Extr_Num']      <- 24
		dat[dat$crossed=='Con2:Quan1:Item2', 'Exp_Num'] <- 16
		dat[dat$crossed=='Con2:Quan1:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con2:Quan1:Item2', 'Extr_Num']      <- 34
		dat[dat$crossed=='Con2:Quan1:Item3', 'Exp_Num'] <- 26
		dat[dat$crossed=='Con2:Quan1:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con2:Quan1:Item3', 'Extr_Num']      <- 44
		dat[dat$crossed=='Con2:Quan1:Item4', 'Exp_Num'] <- 36
		dat[dat$crossed=='Con2:Quan1:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con2:Quan1:Item4', 'Extr_Num']      <- 54
		dat[dat$crossed=='Con2:Quan2:Item1', 'Exp_Num'] <- 24
		dat[dat$crossed=='Con2:Quan2:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con2:Quan2:Item1', 'Extr_Num']      <-  6
		dat[dat$crossed=='Con2:Quan2:Item2', 'Exp_Num'] <- 34
		dat[dat$crossed=='Con2:Quan2:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con2:Quan2:Item2', 'Extr_Num']      <- 16
		dat[dat$crossed=='Con2:Quan2:Item3', 'Exp_Num'] <- 44
		dat[dat$crossed=='Con2:Quan2:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con2:Quan2:Item3', 'Extr_Num']      <- 26
		dat[dat$crossed=='Con2:Quan2:Item4', 'Exp_Num'] <- 54
		dat[dat$crossed=='Con2:Quan2:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con2:Quan2:Item4', 'Extr_Num']      <- 36
		dat[dat$crossed=='Con3:Quan1:Item1', 'Exp_Num'] <-  6
		dat[dat$crossed=='Con3:Quan1:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con3:Quan1:Item1', 'Extr_Num']      <- 24
		dat[dat$crossed=='Con3:Quan1:Item2', 'Exp_Num'] <- 16
		dat[dat$crossed=='Con3:Quan1:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con3:Quan1:Item2', 'Extr_Num']      <- 34
		dat[dat$crossed=='Con3:Quan1:Item3', 'Exp_Num'] <- 26
		dat[dat$crossed=='Con3:Quan1:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con3:Quan1:Item3', 'Extr_Num']      <- 44
		dat[dat$crossed=='Con3:Quan1:Item4', 'Exp_Num'] <- 36
		dat[dat$crossed=='Con3:Quan1:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con3:Quan1:Item4', 'Extr_Num']      <- 54
		dat[dat$crossed=='Con3:Quan2:Item1', 'Exp_Num'] <- 24
		dat[dat$crossed=='Con3:Quan2:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con3:Quan2:Item1', 'Extr_Num']      <-  6
		dat[dat$crossed=='Con3:Quan2:Item2', 'Exp_Num'] <- 34
		dat[dat$crossed=='Con3:Quan2:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con3:Quan2:Item2', 'Extr_Num']      <- 16
		dat[dat$crossed=='Con3:Quan2:Item3', 'Exp_Num'] <- 44
		dat[dat$crossed=='Con3:Quan2:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con3:Quan2:Item3', 'Extr_Num']      <- 26
		dat[dat$crossed=='Con3:Quan2:Item4', 'Exp_Num'] <- 54
		dat[dat$crossed=='Con3:Quan2:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con3:Quan2:Item4', 'Extr_Num']      <- 36
		dat[dat$crossed=='Con4:Quan1:Item1', 'Exp_Num'] <-  6
		dat[dat$crossed=='Con4:Quan1:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con4:Quan1:Item1', 'Extr_Num']      <- 24
		dat[dat$crossed=='Con4:Quan1:Item2', 'Exp_Num'] <- 16
		dat[dat$crossed=='Con4:Quan1:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con4:Quan1:Item2', 'Extr_Num']      <- 34
		dat[dat$crossed=='Con4:Quan1:Item3', 'Exp_Num'] <- 26
		dat[dat$crossed=='Con4:Quan1:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con4:Quan1:Item3', 'Extr_Num']      <- 44
		dat[dat$crossed=='Con4:Quan1:Item4', 'Exp_Num'] <- 36
		dat[dat$crossed=='Con4:Quan1:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con4:Quan1:Item4', 'Extr_Num']      <- 54
		dat[dat$crossed=='Con4:Quan2:Item1', 'Exp_Num'] <- 24
		dat[dat$crossed=='Con4:Quan2:Item1', 'Bline_Num']     <- 15
		dat[dat$crossed=='Con4:Quan2:Item1', 'Extr_Num']      <-  6
		dat[dat$crossed=='Con4:Quan2:Item2', 'Exp_Num'] <- 34
		dat[dat$crossed=='Con4:Quan2:Item2', 'Bline_Num']     <- 25
		dat[dat$crossed=='Con4:Quan2:Item2', 'Extr_Num']      <- 16
		dat[dat$crossed=='Con4:Quan2:Item3', 'Exp_Num'] <- 44
		dat[dat$crossed=='Con4:Quan2:Item3', 'Bline_Num']     <- 35
		dat[dat$crossed=='Con4:Quan2:Item3', 'Extr_Num']      <- 26
		dat[dat$crossed=='Con4:Quan2:Item4', 'Exp_Num'] <- 54
		dat[dat$crossed=='Con4:Quan2:Item4', 'Bline_Num']     <- 45
		dat[dat$crossed=='Con4:Quan2:Item4', 'Extr_Num']      <- 36
		dat$crossed <- NULL
		# what side LEFT, MIDDLE, RIGHT corresponds with Expected, Borderline, Extreme?
		for (row in 1:nrow(dat)) {
			if (dat[row, 'Exp_Num']   == dat[row, 'Left'])  {dat[row, 'Exp_side']   <- 'left'}
			if (dat[row, 'Exp_Num']   == dat[row, 'Mid'])   {dat[row, 'Exp_side']   <- 'mid'}
			if (dat[row, 'Exp_Num']   == dat[row, 'Right']) {dat[row, 'Exp_side']   <- 'right'}
			if (dat[row, 'Bline_Num'] == dat[row, 'Left'])  {dat[row, 'Bline_side'] <- 'left'}
			if (dat[row, 'Bline_Num'] == dat[row, 'Mid'])   {dat[row, 'Bline_side'] <- 'mid'}
			if (dat[row, 'Bline_Num'] == dat[row, 'Right']) {dat[row, 'Bline_side'] <- 'right'}
			if (dat[row, 'Extr_Num']  == dat[row, 'Left'])  {dat[row, 'Extr_side']  <- 'left'}
			if (dat[row, 'Extr_Num']  == dat[row, 'Mid'])   {dat[row, 'Extr_side']  <- 'mid'}
			if (dat[row, 'Extr_Num']  == dat[row, 'Right']) {dat[row, 'Extr_side']  <- 'right'}
		}
		# what button press did the subject actually make? LEFT, MIDDLE, RIGHT, NOANSWER?
		dat$RESPONSE <- as.factor(dat$RESPONSE)
		# what number of dots corresponds with the subject's button press?
		for (row in 1 : nrow(dat) ) {
			switch(as.character(dat[row,'RESPONSE']),
						 'LEFT' = {dat[row, 'response_num'] <- dat[row, 'Left']},
						 'MIDDLE' = {dat[row, 'response_num'] <- dat[row, 'Mid']},
						 'RIGHT' = {dat[row, 'response_num'] <- dat[row, 'Right']},
						 'NOANSWER' = {dat[row, 'response_num'] <- NA}
			)
		}
		# what side was the subject's button-press? Left, mid right?
		dat$response_side <- tolower(dat$RESPONSE)
		dat$response_side[dat$response_side == "middle"] <- 'mid'
		dat$response_side <- factor(dat$response_side, exclude="noanswer")
		# what category was the subject's response? Expected, Borderline, Extreme
		dat$response_category <- "nocat"
		for (row in row.names(na.omit(dat))) {
			if (dat[row, 'response_num'] == dat[row, 'Exp_Num']) {dat[row, 'response_category'] <- 'expected'}
			if (dat[row, 'response_num'] == dat[row, 'Bline_Num']) {dat[row, 'response_category'] <- 'borderline'}
			if (dat[row, 'response_num'] == dat[row, 'Extr_Num']) {dat[row, 'response_category'] <- 'extreme'}
		}
		dat$response_category <- factor(dat$response_category, exclude="nocat")
		dat$RESPONSE <- NULL
		return(dat)
	} # end of classifyResponse function

	# declare local variables
	number_of_valid_subjects <- 30 # = 30
	number_of_rows <- 7680 # 7680
	number_of_trials_per_subject <- number_of_rows / number_of_valid_subjects # = 256
	dat <- gatherData(number_of_valid_subjects) # = 30
	dat <- classifyResponse(dat) # classify the response as expected, near, or far

	# SUBJECT
	dat$Subject=factor(paste("s",sprintf("%02d",dat$Subject),sep=""))
	# TRIAL
	dat$Trial = rep(x = 1:number_of_trials_per_subject, times = number_of_valid_subjects)
	# make a centred Trial for modeling
	dat$c_Trl <-dat$Trial - mean(dat$Trial)
	# make a scaled Trial for modelling
	dat$s_Trl <- as.numeric(scale(dat$Trial))
	# ID
	# id is a unique identifier for the 7680 row data
	dat$id <- factor(paste(paste(dat$Subject),
												 paste("t", sprintf("%03d", dat$Trial), sep="") , sep=":"))
	# ITEM
	# create a centred numeric item variable for modeling
	dat$c_Itm <- ifelse(dat$Item==1, -.75,
											ifelse(dat$Item==2, -.25,
														 ifelse(dat$Item==3, .25, .75)))
	# make Item be a factor and assign labels
	dat$Item <- factor(dat$Item, levels=c(1,2,3,4), labels=c("06:15:24", "16:25:34", "26:35:44", "36:45:54"))
	# add ratios for Item
	item_range_ratio = c(6 / 24, 16 / 34, 26 / 44, 36 / 54)
	# 0.2500000 0.4705882 0.5909091 0.6666667
	item_range_ratio_scaled = as.vector(scale(c(6 / 24, 16 / 34, 26 / 44, 36 / 54)))
	# -1.3441995 -0.1316642  0.5297187  0.9461450
	item_mean_ratio = c(mean(c(6 / 15, 15 / 24)), mean(c(16 / 25, 25 / 34)), mean(c(26 /35, 35 / 44)), mean(c(36 / 45, 45 / 54)))
	# 0.5125000 0.6876471 0.7691558 0.8166667
	item_mean_ratio_scaled = as.vector(scale(c(mean(c(6 / 15, 15 / 24)), mean(c(16 / 25, 25 / 34)), mean(c(26 /35, 35 / 44)), mean(c(36 / 45, 45 / 54)))))
	# -1.37582241 -0.06614191  0.54334858 0.89861574
	dat[dat$Item == "06:15:24", "item_range_ratio"] <-  0.2500000
	dat[dat$Item == "16:25:34", "item_range_ratio"] <-  0.4705882
	dat[dat$Item == "26:35:44", "item_range_ratio"] <-  0.5909091
	dat[dat$Item == "36:45:54", "item_range_ratio"] <-  0.6666667
	dat[dat$Item == "06:15:24", "item_range_ratio_scaled"] <-  -1.3441995
	dat[dat$Item == "16:25:34", "item_range_ratio_scaled"] <-  -0.1316642
	dat[dat$Item == "26:35:44", "item_range_ratio_scaled"] <-   0.5297187
	dat[dat$Item == "36:45:54", "item_range_ratio_scaled"] <-   0.9461450
	dat[dat$Item == "06:15:24", "item_mean_ratio"] <-  0.5125000
	dat[dat$Item == "16:25:34", "item_mean_ratio"] <-  0.6876471
	dat[dat$Item == "26:35:44", "item_mean_ratio"] <-  0.7691558
	dat[dat$Item == "36:45:54", "item_mean_ratio"] <-  0.8166667
	dat[dat$Item == "06:15:24", "item_mean_ratio_scaled"] <-   -1.37582241
	dat[dat$Item == "16:25:34", "item_mean_ratio_scaled"] <-   -0.06614191
	dat[dat$Item == "26:35:44", "item_mean_ratio_scaled"] <-    0.54334858
	dat[dat$Item == "36:45:54", "item_mean_ratio_scaled"] <-    0.89861574
	# VAGUENESS
	# Create a factor coding for Vagueness
	dat[ dat$Condition==1 , 'Vagueness'] <- 'Vague'
	dat[ dat$Condition==2 , 'Vagueness'] <- 'Crisp'
	dat[ dat$Condition==3 , 'Vagueness'] <- 'Vague'
	dat[ dat$Condition==4 , 'Vagueness'] <- 'Crisp'
	dat$Vagueness <- as.factor(dat$Vagueness)
	# manually center Vagueness
	dat$c_Vag <- ifelse(dat$Vagueness=='Crisp', -.5, .5)
	# NUMBER
	# Create a factor coding for Number use
	dat[ dat$Condition==1 , 'Number'] <- 'Numeric'
	dat[ dat$Condition==2 , 'Number'] <- 'Numeric'
	dat[ dat$Condition==3 , 'Number'] <- 'Verbal'
	dat[ dat$Condition==4 , 'Number'] <- 'Verbal'
	dat$Number <- as.factor(dat$Number)
	# manually center Number
	dat$c_Num <- ifelse(dat$Number=='Numeric', -.5, .5)
	# CONDITION
	# make a factor out of Condition, as f_Cnd
	dat$f_Cnd <- factor(dat$Condition, levels=c(1,2,3,4), labels=c('Vg:Nm', 'Cr:Nm', 'Vg:Vb', 'Cr:Vb'))
	# ORDER
	# give the levels of Order meaningful names
	dat$Order <- factor(dat$Order, levels=c(1,2), labels=c('LtoR','RtoL'))
	# make a manually centred Order
	dat$c_Ord <- ifelse(dat$Order=="LtoR",-.5,.5)
  # QUANTITY
	# give the levels of Quantity meaningful names
	dat$Quantity <- factor(dat$Quantity, levels=c(1,2), labels=c('Small','Large'))
	# make a manually centred Quantity
	dat$c_Qty <- ifelse(dat$Quantity=="Small",-.5,.5)
	# INSTRUCTION
	# add number of characters in the instruction # 29 30 34 36 38
	dat$nchar_instr = nchar(dat$Instruction)
	dat$nchar_instr_scaled = as.vector(scale(nchar(dat$Instruction), scale=TRUE))
	# make Instruction be a factor (17 levels)
	dat$Instruction <- as.factor(dat$Instruction)
	# RT
	# add transformations of RT
	dat$RT_RecSqd    <- 1/dat$RT^2
	dat$RT_Rec       <- 1/dat$RT
	dat$RT_RecSqt    <- 1/sqrt(dat$RT)
	dat$RT_log       <- log(dat$RT)
	dat$RT_sqt       <- sqrt(dat$RT)
	dat$RT_raw       <- dat$RT
	dat$RT_sqd       <- dat$RT^2
  # print to file a table with information about the design
	design_info <- unique(subset(dat, select=c(Item, Condition, Vagueness, Number, Quantity, Order,
																						 Left, Mid, Right, Exp_Num, Bline_Num, Extr_Num, Exp_side, Bline_side, Extr_side,Instruction)))
	design.info <- design_info[order(design_info$Item, design_info$Condition, design_info$Quantity, design_info$Order),]
	row.names(design_info) <- NULL
	capture.output(print.data.frame(design_info, row.names=F, print.gap=3, quote=F, right=F),
								 file="design_info.table")
	# put dat in better column order
	dat <- subset(dat,
								select = c(id, Subject, Trial, Condition, Order, Quantity, Vagueness, Number,
													 Item, item_range_ratio, item_range_ratio_scaled, item_mean_ratio, item_mean_ratio_scaled,
													 c_Trl, s_Trl, c_Itm, c_Vag, c_Num, f_Cnd, c_Ord, c_Qty,
													 RT, RT_RecSqd, RT_Rec, RT_RecSqt, RT_log, RT_sqt, RT_raw, RT_sqd,
													 Exp_Num, Bline_Num, Extr_Num, Exp_side, Bline_side, Extr_side, response_num, response_side, response_category, Left, Mid, Right,
													 Instruction, nchar_instr
								))
	# This data set (dat) contains *all* trials 7680 including impossible trials and is
	# mainly for graphs comparing different removals
	save(dat, file='data_raw.Rda')
	# remove impossible trials from dat in new data dd #
	# Throw out RT = 1 and RT = 59998, and RTprev = 1 and RTprev = 59998
	# i.e., throw out sticky fingers and timeouts,
	# and the trials that followed sticky fingers and timeouts
	# since they were likely affected by unusual previous trials.
	# lose impossible trials
	dd <- dat
	dd$RT[dd$RT == 1 ] <- NA
	dd$RT[dd$RT == 59998 ] <- NA
	dd <- dd[complete.cases(dd),]
	row.names(dd) <- NULL
	# add preceding RT: because we removed impossible trials, the value for preceding RT for a trial following an impossible trial is the value of the trial that preceded the impossible trial.
	dd$RTprev <- NA
	for (s in levels(dd$Subject)) {
		nrows = nrow(dd[dd$Subject==s,])
		for (i in 1:nrows) {
			if (i==1) {
				dd[dd$Subject==s, "RTprev"][i] <- dd[dd$Subject==s, "RT"][i]
			}
			else
				dd[dd$Subject==s, "RTprev"][i] <- dd[dd$Subject==s, "RT"][i-1]
		}
	}
	# add transformations of previous RT
	dd$RTprev_RecSqd    <- 1/dd$RTprev^2
	dd$RTprev_Rec       <- 1/dd$RTprev
	dd$RTprev_RecSqt0   <- 1/sqrt(dd$RTprev)
	dd$RTprev_RecSqt    <- as.vector(scale( 1/sqrt(dd$RTprev)  ))
	dd$RTprev_log       <- log(dd$RTprev)
	dd$RTprev_sqt       <- sqrt(dd$RTprev)
	dd$RTprev_raw       <- dd$RTprev
	dd$RTprev_sqd       <- dd$RTprev^2
	# number of higher-level cells in the design (abstracting over Order) =
	# Item(4) * Number(2) * Vagueness(2) * Quantity(2) = 32
	# number of measurements in eaach cell = 8
	# 332 * 8 = 256
	# 256 * 30 = 7680
	dd$measurement=0
	dd$cell=0
	for (s in levels(dd$Subject)) {
		cellcount=0
		for (i in levels(dd$Item)) {
			for (n in levels(dd$Number)) {
				for (v in levels(dd$Vagueness)) {
					for (q in levels(dd$Quantity)) {
						measurementcount=0
						cellcount=cellcount+1
						for (t in dd[dd$Subject==s & dd$Item==i & dd$Number==n & dd$Vagueness==v & dd$Quantity == q, "Trial"]) {
							dd[dd$Subject==s & dd$Item==i & dd$Number==n & dd$Vagueness==v & dd$Quantity == q & dd$Trial==t, "cell"] <- cellcount
							measurementcount=measurementcount+1
							dd[dd$Subject==s & dd$Item==i & dd$Number==n & dd$Vagueness==v & dd$Quantity == q & dd$Trial==t, "measurement"] = measurementcount
						}
					}
				}
			}
		}
	}
	# put dd in better column order
	dd <- subset(dd,
							 select = c(id, Subject, Trial, Condition, Order, Quantity, Vagueness, Number,
							 					 Item, item_range_ratio, item_range_ratio_scaled, item_mean_ratio, item_mean_ratio_scaled,
							 					 c_Trl, s_Trl, c_Itm, c_Vag, c_Num, f_Cnd, c_Ord, c_Qty,
							 					 RT, RT_RecSqd, RT_Rec, RT_RecSqt, RT_log, RT_sqt, RT_raw, RT_sqd,
							 					 RTprev, RTprev_RecSqd, RTprev_Rec, RTprev_RecSqt, RTprev_log, RTprev_sqt, RTprev_raw, RTprev_sqd,
							 					 Exp_Num, Bline_Num, Extr_Num, Exp_side, Bline_side, Extr_side, response_num, response_side, response_category, Left, Mid, Right,
							 					 Instruction, nchar_instr,
							 					 cell, measurement
							 ))
	save(dd, file="data_processed.Rda")
} # end of the else clause, which is run if the file data.Rda does not exist.
@  

\section{Plots}
\FloatBarrier
\begin{figure}[hbtp]
<<plotDists, fig=TRUE, message=FALSE, echo=FALSE, cache=TRUE>>=
# first create a data frame specially for transformations
# this won't be used for analysis, just for this plot
load('data_raw.Rda') # dat
dat_transforms <- dat
# dfSubset says whether any data points were removed
dat_transforms$dfSubset <- "original"
# RTtype says whether the row contains data for an observed RT or 
# a sample from a normal distribution with the same mean and sd
dat_transforms$RTtype <- "observed"
# create extra rows for dfs with removed (outlier) data points
dat3 <- subset(dat_transforms, RT>1 & RT<59999)              # nrow 7677
dat3$dfSubset <- "RT>1&RT<59999"
dat4 <- subset(dat_transforms, RT>1 & RT<59999 & RT<30001)   # nrow 7658
dat4$dfSubset <- "RT>1&RT<30001"
# bring the dfs back into main df
dat_transforms <- rbind(dat3, dat4)
dat_transforms$dfSubset <- factor(dat_transforms$dfSubset, levels=c("RT>1&RT<59999", "RT>1&RT<30001"))
# create extra rows for normally distributed transformed variables
dato = dat_transforms
datn = dat_transforms; datn$RTtype <- "normal"
dat_transforms <- rbind(dato,datn)
dat_transforms$RTtype <- factor(dat_transforms$RTtype, levels=c("observed","normal"))
# for safety
dat_transforms[dat_transforms$RTtype=="normal", c("RT_log", "RT_raw")] <- NA
# Create the normally distributed transformed variables, replacing the NAs declared above
for (k in levels(dat_transforms$dfSubset)){
    dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="normal", "RT_log"]  <- 
    rnorm(n=length(dat_transforms[dat_transforms$dfSubset==k  & dat_transforms$RTtype=="observed", "RT_log"]), 
          mean=mean(dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="observed", "RT_log"]), 
          sd=sd(dat_transforms[dat_transforms$dfSubset==k     & dat_transforms$RTtype=="observed", "RT_log"]))
    dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="normal", "RT_raw"]  <- 
    rnorm(n=length(dat_transforms[dat_transforms$dfSubset==k  & dat_transforms$RTtype=="observed", "RT_raw"]), 
          mean=mean(dat_transforms[dat_transforms$dfSubset==k & dat_transforms$RTtype=="observed", "RT_raw"]), 
          sd=sd(dat_transforms[dat_transforms$dfSubset==k     & dat_transforms$RTtype=="observed", "RT_raw"]))
  }# end of create normally distributed equivalents for the data transforms.
temp <- reshape2::melt(dat_transforms, 
             id.vars=c("dfSubset", "RTtype", "Item", "Vagueness", "Number", "Quantity", "Order"),
             measure.vars=c("RT_log", "RT_raw"),
             variable.name="transformation",
             value.name="time")
ggplot(temp, aes(time, colour=RTtype)) + geom_freqpoly() + facet_wrap(transformation~dfSubset, scales='free') + scale_color_manual(values=c("blue","red")) + theme_bw() + theme(aspect.ratio=1)
@
\caption{Compare distributions of the various transformations of RT against random samples from normal distributions with the same mean and sd to see which transformations best approximate normal distributions.}
\end{figure}

\end{document}